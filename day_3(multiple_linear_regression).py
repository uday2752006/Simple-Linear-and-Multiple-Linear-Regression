# -*- coding: utf-8 -*-
"""DAY-3(Multiple Linear Regression).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dPXbxrDsLN2Pm47lBIUV4JXNcT9yLwt7
"""

import numpy as np        # For numerical operations and arrays
import pandas as pd         # For data loading, manipulation, and analysis
import matplotlib.pyplot as  plt # for data visualzing
import seaborn as sns        # For advanced data visualization with better styling

data=pd.read_csv("/content/housing.csv") # Import dataset
data # display the data

data.isnull() # displays whether the dataset contains null values or not

data.describe() # displays the Summary statistics for numerical columns

data.info() # displays the Summary of data types and non-null values

sns.heatmap(data.corr()) # visual represents the correlation of dataset

sns.pairplot(data) # creates pairwise plot for all numerical columns in dataset

x=data[['total_bedrooms','population','total_rooms']] # assign the 3 inputs to the x
x.head() # displaying the top 5 values of x

y=data['median_house_value'] # assign the output to y
y.head() # displaying the top 5 values of y

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3) # here we are taking the test size as we want and the dataset are into 2 types . train and test dataset and we wil take test size as 30%

x_train.head() # display the x_train

y_train.head() # display the y_train

# from sk.linear_model import MultipleLinearRegression
from sklearn.linear_model import LinearRegression

model=LinearRegression()  #This initializes an instance of the LinearRegression␣
model

x_train_clean = x_train.dropna() # in the x there were presence of non-null values so we are drop that values
y_train_clean = y_train[x_train_clean.index]

model.fit(x_train_clean, y_train_clean) # This trains the linear regression model using the training data (x_train_clean and y_train_clean)␣

x_test_clean = x_test.dropna()
model.predict(x_test_clean)  # this checks how the correctly model giving the value

y_test # display the y_test

from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error
#R-squared (R2) is a statistical measure that indicates how well the independent variables explain the variation in the dependent variable
#Mean Squared Error (MSE) measures the average squared difference between actual and predicted values.
#Mean Absolute Error (MAE) calculates the average of the absolute differences between actual and predicted values.

y_test_clean = y_test[x_test_clean.index]
mae=mean_absolute_error(y_test_clean,model.predict(x_test_clean)) # This line of code calculates the Mean Absolute Error (MAE).
mae

mse=mean_squared_error(y_test_clean,model.predict(x_test_clean)) # This line of code calculates the Root Mean Squared Error (RMSE), which is the square root of the Mean Squared Error (MSE).
mse

r2=r2_score(y_test_clean,model.predict(x_test_clean)) # This calculates the R-squared (R2) score for the model's predictions on the test data (X_test) against the true values (Y_test).
r2

plt.scatter(data['median_house_value'],data['total_rooms']) #Create a scatter plot for house value vs total rooms
plt.plot(data['median_house_value'],data['total_rooms'],color="green") # displaying the output test in the form of line in the graph

plt.scatter(data['total_bedrooms'],data['median_house_value']) #Create a scatter plot for total bedrooms vs median house value
plt.plot(data['total_bedrooms'],data['median_house_value'],color="gold") # displaying the output test in the form of line in the graph

plt.scatter(data['total_rooms'],data['total_bedrooms']) #Create a scatter plot for total rooms vs total bedrooms
plt.plot(data['total_rooms'],data['total_bedrooms'],color="red") # displaying the output test in the form of line in the graph