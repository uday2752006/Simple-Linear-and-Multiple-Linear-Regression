# -*- coding: utf-8 -*-
"""DAY-3(Simple Linear Regression).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19z4IsKOS5COeb8ce2CwP-OcVsZLG0dxI
"""

import numpy as np        # For numerical operations and arrays
import pandas as pd         # For data loading, manipulation, and analysis
import matplotlib.pyplot as  plt # for data visualzing
import seaborn as sns        # For advanced data visualization with better styling

data=pd.read_csv("/content/Salary_dataset.csv") # Import dataset
data # display the data

data.info() # displays the Summary of data types and non-null values

data.describe() # displays the Summary statistics for numerical columns

sns.pairplot(data) # creates pairwise plot for all numerical columns in dataset

sns.heatmap(data.corr()) # visual represents the correlation of dataset

# here we are plotting the graph to understand the relation between input and output feature based on that observation we will recognize which algorithm is best for the dataset
plt.scatter(data['YearsExperience'],data['Salary']) # plot the graph between yearsexperience and salary
plt.xlabel("YearsExperience")
plt.ylabel("Salary")

x=data['YearsExperience'] # assign input to the x

y=data['Salary'] # assign output to y

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=101) # here we are taking the test size as we want and the dataset are into 2 types . train and test dataset and we wil take test size as 30%

x_train.head() # display the x_train

y_train.head() # display the y_train

from sklearn.linear_model import LinearRegression #This imports the LinearRegression class from the sklearn.linear_model module

model=LinearRegression() #This initializes an instance of the LinearRegression␣
model

model.fit(x_train.values.reshape(-1,1),y_train) #This trains the linear regression model using the training data (X_train and Y_train)␣

model.predict(x_test.values.reshape(-1,1)) # this checks how the correctly model giving the value

y_test # displaying the y_test

#R-squared (R2) is a statistical measure that indicates how well the independent variables explain the variation in the dependent variable
#Mean Squared Error (MSE) measures the average squared difference between actual and predicted values.
#Mean Absolute Error (MAE) calculates the average of the absolute differences between actual and predicted values.
from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error

mae=mean_absolute_error(y_test,model.predict(x_test.values.reshape(-1,1))) # This line of code calculates the Mean Absolute Error (MAE).
mae

mse=mean_squared_error(y_test,model.predict(x_test.values.reshape(-1,1))) # This line of code calculates the Root Mean Squared Error (RMSE), which is the square root of the Mean Squared Error (MSE).
mse

r2=r2_score(y_test,model.predict(x_test.values.reshape(-1,1))) # This calculates the R-squared (R2) score for the model's predictions on the test data (X_test) against the true values (Y_test).
r2

plt.scatter(x_test,y_test) #Create a scatter plot for x_test vs y_test
plt.plot(x_test,model.predict(x_test.values.reshape(-1,1)),color="green")# displaying the output test in the form of line in the graph